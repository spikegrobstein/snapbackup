#! /bin/bash

####
## snapbackup
## run this to iterate over scripts in the policies directory
## each policy file echos back the files that it created whne it's done
## files are then fed to the upload.rb script which puts them in the right place(s) on S3
####

# all user configuration is stored in the config.sh file


SCRIPT=$(readlink -f $0)
echo $SCRIPT
SCRIPTPATH=`dirname "$SCRIPT"`

# read the config from the config file:
. "$SCRIPTPATH"/config.sh

# export the AWS variables so they're visible in the connector:
export S3_BUCKET_NAME
export AMAZON_ACCESS_KEY_ID
export AMAZON_SECRET_ACCESS_KEY

STORAGE_CONNECTOR="${SCRIPTPATH}/connectors/${STORAGE_CONNECTOR_NAME}"
DATESTAMP=`date +%Y_%m%d`

# exit codes
EXIT_NOERR=0
EXIT_NOPOLICIES=10
EXIT_PARTIALERROR=11
EXIT_GENERICERROR=1

# a counter for number of errors encountered
ENCOUNTERED_ERRORS=0

function increment_errors () {
  ENCOUNTERED_ERRORS=$(($ENCOUNTERED_ERRORS + 1))
}


# processes lines of input on STDIN and sends it to the upload script
function store_files () {
  true # run this to ensure that $? is set to 0

  while [[ $? -eq 0 ]]
  do
    read FILE

    # if the read returned non-zero and it also read no data, then break out of while loop. we're done.
    if [[ $? -ne 0 && -z "$FILE" ]]; then
      break
    fi

    # StorageConnectors must adhere to the following commandline usage:
    # ./connector.py <datestamp> <policy_name> <file_path>
    #
    # The connector will then store that file and return 0 (success)
    # a non-zero return value signals and error.
    # TODO: catch errors from the StorageConnector

    "$STORAGE_CONNECTOR" $DATESTAMP "$POLICY_NAME" "$FILE"

    local VAL=$?
    if [[ $VAL -ne 0 ]]; then
      echo "There was an error with the storage connector. It exited with $VAL while uploading ($FILE)" >&2
    fi

    # delete the file after it's uploaded
    if [[ -e "$FILE" ]]; then
      rm "$FILE"
    fi
  done
}

# run specified policy
function run_policy () {
  local POLICY=$(policy_abs_path $1)

  if [[ ! -e "$POLICY" ]]; then
    echo "Policy not found: $POLICY"
    increment_errors
  else
    "$POLICY" | store_files
  fi
}

# given a string representing a policy, returns the abolute path to the policy
# absolute path is calculated by checking to see if supplied string contains a leading slash
# if leading slash, then return that string
# else, append supplied string to path to policies directory
# ie:
#  "/path/to/policy.sh" => "/path/to/policy.sh"
#  "subdir/policy.sh"   => "/usr/local/snapbackup/policies/subdir/policy.sh"
#  "policy.sh"           => "/usr/local/snapbackup/policies/policy.sh"
#
# @param $POLICY -- the afformentioned policy
function policy_abs_path () {
  local POLICY=$1

  local PTMP=${POLICY#/}

  # check to see if the policy is an absolute path
  # it's absolute if it starts with a / (if $PTMP != $POLICY)
  if [[ "$POLICY" == "$PTMP" ]]; then
    # they're equal, so the path to the policy is actually relative to the policies directory
    POLICY=${SCRIPTPATH}/policies/${POLICY}
  fi

  # return the value
  echo "$POLICY"
}

function run_all_policies () {
  local POLICIES=`ls "$SCRIPTPATH/policies"`

  # check to make sure there is at least one policy loaded
  if [[ -z $POLICIES ]]; then
    echo "No policies were found. Cannot continue the backup."
    echo "Sample policies are located in the policies-available directory"
    echo "Symlink polices from policies-available to policies to enable them."
    echo ""
    exit $ERROR_NOPOLICIES
  fi

  for policy in $POLICIES
  do
    # parse out the policy name from the filename ( eg: "mysql.sh" => "mysql" )
    POLICY_NAME=`echo $policy | cut -d'.' -f1`

    # execute the policy and receive list of files ready for backup.
    run_policy $policy
  done
}

############################
# START PROGRAM:
############################

# if any commandline arguments are supplied, run those policies, otherwise, run all policies

if [[ $# -eq 0 ]]; then
  run_all_policies
else
  for policy in $@; do
    run_policy "$policy"
  done
fi

# check number of errors encountered
if [[ $ENCOUNTERED_ERRORS -gt 0 ]]; then
  echo "Encountered $ENCOUNTERED_ERRORS errors."
  echo ""
  exit $ERROR_PARTIALERROR
fi

exit $ERROR_NOERR

#done.

